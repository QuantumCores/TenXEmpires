openapi: 3.0.4
info:
  title: TenX Empires API
  description: REST API for TenX Empires - a turn-based strategy game (Version 1.0)
  contact:
    name: TenX Empires
    url: https://github.com/tenxempires
  version: v1
paths:
  /v1/games:
    get:
      tags:
      - v1
      summary: Lists the authenticated user's games with optional filtering and pagination.
      description: "Returns a paginated list of games for the authenticated user.\r\nRLS (Row-Level Security) is enforced via the session `app.user_id` context variable.\r\n\r\nQuery Parameters:\r\n- status: Filter by game status (active or finished)\r\n- page: 1-based page number (default: 1)\r\n- pageSize: Number of items per page (default: 20, max: 100)\r\n- sort: Sort field - startedAt, lastTurnAt, or turnNo (default: lastTurnAt)\r\n- order: Sort order - asc or desc (default: desc)\r\n\r\nExamples:\r\n- GET /v1/games - All games, sorted by last turn descending\r\n- GET /v1/games?status=active - Active games only\r\n- GET /v1/games?sort=startedAt&order=asc&page=2&pageSize=10 - Second page, sorted by start date ascending\r\n            \r\nSample response:\r\n            \r\n    {\r\n      \"items\": [\r\n        {\r\n          \"id\": 1,\r\n          \"status\": \"active\",\r\n          \"turnNo\": 5,\r\n          \"mapId\": 1,\r\n          \"mapSchemaVersion\": 1,\r\n          \"startedAt\": \"2025-10-20T10:00:00Z\",\r\n          \"finishedAt\": null,\r\n          \"lastTurnAt\": \"2025-10-20T11:30:00Z\"\r\n        }\r\n      ],\r\n      \"page\": 1,\r\n      \"pageSize\": 20,\r\n      \"total\": 15\r\n    }"
      operationId: ListGames
      parameters:
      - name: Status
        in: query
        schema:
          type: string
      - name: Page
        in: query
        schema:
          maximum: 2147483647
          minimum: 1
          type: integer
          format: int32
      - name: PageSize
        in: query
        schema:
          maximum: 100
          minimum: 1
          type: integer
          format: int32
      - name: Sort
        in: query
        schema:
          type: string
      - name: Order
        in: query
        schema:
          type: string
      responses:
        200:
          description: Returns the paged list of games.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameListItemDtoPagedResult'
              example:
                items:
                - id: 1
                  status: active
                  turnNo: 5
                  mapId: 1
                  mapSchemaVersion: 1
                  startedAt: 2025-10-20T10:00:00+00:00
                  finishedAt: 
                  lastTurnAt: 2025-10-20T11:30:00+00:00
                - id: 2
                  status: finished
                  turnNo: 10
                  mapId: 1
                  mapSchemaVersion: 1
                  startedAt: 2025-10-15T14:00:00+00:00
                  finishedAt: 2025-10-15T15:45:00+00:00
                  lastTurnAt: 2025-10-15T15:45:00+00:00
                - id: 3
                  status: active
                  turnNo: 15
                  mapId: 2
                  mapSchemaVersion: 1
                  startedAt: 2025-10-22T09:00:00+00:00
                  finishedAt: 
                  lastTurnAt: 2025-10-23T14:20:00+00:00
                page: 1
                pageSize: 20
                total: 15
        400:
          description: Bad request due to invalid query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        401:
          description: Unauthorized - user is not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        500:
          description: Internal server error occurred.
  /v1/maps/{code}:
    get:
      tags:
      - v1
      summary: Gets metadata for a specific map by code.
      description: "Supports conditional requests via ETag:\r\n- Response includes an ETag header derived from schemaVersion, width, height\r\n- Clients can send If-None-Match header with the ETag value\r\n- If data hasn't changed, returns 304 Not Modified\r\n            \r\nSample response:\r\n            \r\n    {\r\n      \"id\": 1,\r\n      \"code\": \"map-01\",\r\n      \"schemaVersion\": 1,\r\n      \"width\": 20,\r\n      \"height\": 30\r\n    }"
      operationId: GetMapByCode
      parameters:
      - name: code
        in: path
        description: The unique map code.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns the map metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapDto'
              example:
                id: 1
                code: map-01
                schemaVersion: 1
                width: 20
                height: 30
        400:
          description: Bad request due to invalid code parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Map not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        304:
          description: Not Modified - cached version is still valid.
        500:
          description: Internal server error occurred.
  /v1/maps/{code}/tiles:
    get:
      tags:
      - v1
      summary: Gets the list of tiles for a specific map by code.
      description: "Returns tiles for rendering terrain and resources. Supports pagination for large maps.\r\nResults are ordered by row, then column for stable pagination.\r\n\r\nSupports conditional requests via ETag:\r\n- Response includes an ETag header derived from map code, pagination, and tile count\r\n- Clients can send If-None-Match header with the ETag value\r\n- If data hasn't changed, returns 304 Not Modified\r\n            \r\nSample response:\r\n            \r\n    {\r\n      \"items\": [\r\n        {\r\n          \"id\": 1,\r\n          \"row\": 0,\r\n          \"col\": 0,\r\n          \"terrain\": \"grassland\",\r\n          \"resourceType\": \"wheat\",\r\n          \"resourceAmount\": 2\r\n        }\r\n      ],\r\n      \"page\": 1,\r\n      \"pageSize\": 20,\r\n      \"total\": 400\r\n    }"
      operationId: GetMapTiles
      parameters:
      - name: code
        in: path
        description: The unique map code.
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: 'Optional 1-based page number (default: 1).'
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        description: 'Optional page size (default: 20, max: 100).'
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Returns the paged list of map tiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapTileDtoPagedResult'
              example:
                items:
                - id: 1
                  row: 0
                  col: 0
                  terrain: grassland
                  resourceType: wheat
                  resourceAmount: 2
                - id: 2
                  row: 0
                  col: 1
                  terrain: plains
                  resourceType: 
                  resourceAmount: 0
                - id: 3
                  row: 0
                  col: 2
                  terrain: forest
                  resourceType: wood
                  resourceAmount: 3
                page: 1
                pageSize: 20
                total: 400
        400:
          description: Bad request due to invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Map not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        304:
          description: Not Modified - cached version is still valid.
        500:
          description: Internal server error occurred.
  /v1/unit-definitions:
    get:
      tags:
      - v1
      summary: Gets all unit definitions.
      description: >-
        Returns the static list of unit types and their stats (attack, defense, movement, etc.).

        This data is read-only and cacheable.


        Supports conditional requests via ETag:

        - Response includes an ETag header representing the current data version

        - Clients can send If-None-Match header with the ETag value

        - If data hasn't changed, returns 304 Not Modified


        Sample response:

            {
              "items": [
                {
                  "id": 1,
                  "code": "warrior",
                  "isRanged": false,
                  "attack": 20,
                  "defence": 10,
                  "rangeMin": 0,
                  "rangeMax": 0,
                  "movePoints": 2,
                  "health": 100
                }
              ]
            }
      operationId: GetUnitDefinitions
      responses:
        200:
          description: Returns the list of unit definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDefinitionDtoItemsResult'
              example:
                items:
                - id: 1
                  code: warrior
                  isRanged: false
                  attack: 20
                  defence: 10
                  rangeMin: 0
                  rangeMax: 0
                  movePoints: 2
                  health: 100
                - id: 2
                  code: archer
                  isRanged: true
                  attack: 15
                  defence: 5
                  rangeMin: 2
                  rangeMax: 3
                  movePoints: 2
                  health: 80
                - id: 3
                  code: cavalry
                  isRanged: false
                  attack: 25
                  defence: 8
                  rangeMin: 0
                  rangeMax: 0
                  movePoints: 4
                  health: 90
        304:
          description: Not Modified - cached version is still valid.
        500:
          description: Internal server error occurred.
  /WeatherForecast:
    get:
      tags:
      - v1
      operationId: GetWeatherForecast
      parameters:
      - name: X-Api-Version
        in: header
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            text/plain; version=1.0:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherForecast'
            application/json; version=1.0:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherForecast'
            text/json; version=1.0:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherForecast'
components:
  schemas:
    GameListItemDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          nullable: true
        turnNo:
          type: integer
          format: int32
        mapId:
          type: integer
          format: int64
        mapSchemaVersion:
          type: integer
          format: int32
        startedAt:
          type: string
          format: date-time
        finishedAt:
          type: string
          format: date-time
          nullable: true
        lastTurnAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    GameListItemDtoPagedResult:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/GameListItemDto'
          nullable: true
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    MapDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          nullable: true
        schemaVersion:
          type: integer
          format: int32
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
      additionalProperties: false
    MapTileDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        row:
          type: integer
          format: int32
        col:
          type: integer
          format: int32
        terrain:
          type: string
          nullable: true
        resourceType:
          type: string
          nullable: true
        resourceAmount:
          type: integer
          format: int32
      additionalProperties: false
    MapTileDtoPagedResult:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MapTileDto'
          nullable: true
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    UnitDefinitionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        code:
          type: string
          nullable: true
        isRanged:
          type: boolean
        attack:
          type: integer
          format: int32
        defence:
          type: integer
          format: int32
        rangeMin:
          type: integer
          format: int32
        rangeMax:
          type: integer
          format: int32
        movePoints:
          type: integer
          format: int32
        health:
          type: integer
          format: int32
      additionalProperties: false
    UnitDefinitionDtoItemsResult:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UnitDefinitionDto'
          nullable: true
      additionalProperties: false
    WeatherForecast:
      type: object
      properties:
        date:
          type: string
          format: date
        temperatureC:
          type: integer
          format: int32
        temperatureF:
          type: integer
          format: int32
          readOnly: true
        summary:
          type: string
          nullable: true
      additionalProperties: false
