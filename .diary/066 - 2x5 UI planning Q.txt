<pytania>
1. Should zoom be anchored at the mouse/touch pointer or the view center?
Recommendation: Anchor zoom at the pointer (fallback to center if outside canvas); adjust pan to keep the world coordinate under the pointer stable; clamp to map bounds.

2. Do we apply a minimum display threshold to avoid flicker on AI/Loading overlays?
Recommendation: Defer overlay until >150 ms; once shown, keep visible for ≥250 ms; otherwise show a subtle spinner on the End Turn button.

3. Should modals blur the map background or only dim it for performance?
Recommendation: Prefer a light blur (backdrop-filter: blur(2px)) with a reduced-transparency fallback to dim on low-power/unsupported devices; detect and disable blur when frames drop.

4. Should global hotkeys be suspended while modals/inputs are focused?
Recommendation: Yes—scope hotkeys to the map; when any modal opens or an input has focus, disable map hotkeys (E, WASD, +/-) and restore on close/blur.

5. What exact content should the bottom center panel show for Unit and City selections?
Recommendation: Unit: type icon/name, HP bar with numbers, attack/defence, remaining move points, range (for ranged), status tags; City: HP bar with numbers, worked tiles count (radius-2), resource amounts, production progress, siege indicator; include actions to center camera and “Next unit”.

6. Should we standardize a color palette for overlays with color-blind safety?
Recommendation: Yes—define Tailwind theme tokens for reach/path/targets/blocked (CVD-safe), plus focus/selection states; include a legend in the Help modal and ensure ≥4.5:1 contrast on all backgrounds.

7. For `/maps/{code}/tiles`, should we fetch everything at once or paginate/stream?
Recommendation: Fetch all tiles in a single request (20x15 is small), cache by ETag with `staleTime: Infinity`, and invalidate on schema/map code change.

8. Where and how should “Autosave completed” feedback appear to avoid noise?
Recommendation: Show a small toast near the End Turn area for 1.5 s; dedupe multiple autosaves per turn; provide a “View Saves” link that opens `?modal=saves`.

9. Should CSRF token updates be shared across tabs to reduce failures?
Recommendation: Yes—broadcast new token via `BroadcastChannel` (fallback to `localStorage` event); tabs update in-memory token immediately to prevent 401/419 loops.

10. Do we need a graceful fallback if Canvas is unsupported or underperforms?
Recommendation: Provide a capability check and optional SVG fallback; if Canvas FPS drops persistently, prompt to reduce effects (disable blur/grid) or switch to SVG; show an “unsupported browser” message if neither is viable.
</pytania>
