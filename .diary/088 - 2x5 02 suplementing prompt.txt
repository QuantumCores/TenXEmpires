You are an experienced software architect tasked with creating detailed implementation plans for missing REST API endpoints. Your plans will guide the development team in the effective and correct implementation of these missing endpoints.

Before starting, review the following information:

1. **Route API specification:**
   <route_api_specification>
   [api-plan.md](.ai/api-plan.md)
   </route_api_specification>

2. **Related database resources:**
   <related_db_resources>
   [db-plan.md](.ai/db-plan.md)
   </related_db_resources>

3. **Type definitions:**
   <type_definitions>
   find DTOS in `TenXEmpires.Server.Domain\DataContracts` folder 
   </type_definitions>

4. **Tech stack:**
   <tech_stack>
   [tech-stack.md](.ai/tech-stack.md) 
   </tech_stack>
   
5. **UI specification**
   <ui_specification>
   [ui-plan.md](.ai/ui-plan.md)
   </ui_specification>

6. **Implementation rules:**
   <implementation_rules>
     @backend.mdc   @privacy-policy.md @cookie-policy.md 
   </implementation_rules>

---

Your task is to create a **comprehensive implementation plan** for those REST API endpoint which are missing in the [api-plan.md](.ai/api-plan.md) but are required from the [ui-plan.md](.ai/ui-plan.md) perspective.

Before providing the final plan for each endpoint, use `<analysis>` tags to analyze the information and outline your approach. In this analysis (per endpoint), ensure that you:

1. Summarize the key points of the API specification.
2. List the required and optional parameters from the API spec.
3. Identify necessary DTOs and Command Models.
4. Consider how to extract the logic into a service (existing or new, if none exists).
5. Plan input validation based on the API spec, database resources, and implementation rules.
6. Define how errors should be logged in the error table (if applicable).
7. Identify potential security concerns based on the API spec and tech stack.
8. Outline potential error scenarios and corresponding status codes.

---

After completing your analysis, create a **detailed implementation plan** in markdown format. The plan should include the following sections:

1. **Endpoint Overview**
2. **Request Details**
3. **Response Details**
4. **Data Flow**
5. **Security Considerations**
6. **Error Handling**
7. **Performance**
8. **Implementation Steps**

Throughout the plan, ensure that you:

* Use correct HTTP status codes:

  * 200 for successful read
  * 201 for successful creation
  * 400 for invalid input
  * 401 for unauthorized access
  * 404 for not found
  * 500 for server errors
* Align with the provided tech stack
* Follow the specified implementation rules

---

The final output should be a **well-organized implementation plan in markdown format**. Here's an example of the expected output structure:

```markdown
# API Endpoint Implementation Plan: [Endpoint Name]

## 1. Endpoint Overview
[Brief description of the endpointâ€™s purpose and functionality]

## 2. Request Details
- HTTP Method: [GET/POST/PUT/DELETE]
- URL Pattern: [URL pattern]
- Parameters:
  - Required: [List of required parameters]
  - Optional: [List of optional parameters]
- Request Body: [Request body structure, if applicable]

## 3. Used Types
[DTOs and Command Models needed for implementation]

## 4. Response Details
[Expected response structure and status codes]

## 5. Data Flow
[Description of data flow, including interactions with external services or databases]

## 6. Security Considerations
[Authentication, authorization, and input validation details]

## 7. Error Handling
[List of potential errors and how to handle them]

## 8. Performance Considerations
[Potential bottlenecks and optimization strategies]

## 9. Implementation Steps
1. [Step 1]
2. [Step 2]
3. [Step 3]
...
```

---

The final output should consist **only** of the implementation plan in markdown format and **must not repeat or duplicate** any work from the analysis section.

For each endpoint, save a separate implementation plan as:
`.ai/endpoints/<endpoint-name>-implementation-plan.md`

Ensure each plan is **detailed**, **clear**, and provides **comprehensive guidance** for the development team.

Ensure that [api-plan.md](.ai/api-plan.md) is update with with missing enpoint information. Follow updated file documentation style.
