---
alwaysApply: false
---
# AI Rules for {{project-name}}

{{project-description}}

## Tech Stack

- TypeScript 5
- React 19
- Tailwind 4

## Project Structure

When introducing changes to the project, always follow the directory structure below:

- `./tenxempires.client/src` - source code
- `./tenxempires.client/src/layouts` - layouts
- `./tenxempires.client/src/pages` - pages
- `./tenxempires.client/src/pages/public` - public pages (landing, login, register, etc.)
- `./tenxempires.client/src/pages/game` - game-related pages
- `./tenxempires.client/src/pages/api` - API endpoints
- `./tenxempires.client/src/components` - client-side components
- `./tenxempires.client/src/components/auth` - authentication-related components (forms, modals)
- `./tenxempires.client/src/components/modals` - modal containers and managers
- `./tenxempires.client/src/components/landing` - landing page components
- `./tenxempires.client/src/components/layouts` - layout components
- `./tenxempires.client/src/components/ui` - shared UI components
- `./tenxempires.client/src/types` - TypeScript type definitions
- `./tenxempires.client/src/api` - API client utilities
- `./tenxempires.client/src/features` - feature-specific code (auth, analytics, etc.)
- `./tenxempires.client/src/router` - routing configuration
- `./tenxempires.client/src/providers` - React context providers
- `./tenxempires.client/src/assets` - static internal assets
- `./tenxempires.client/public` - public assets

When modifying the directory structure, always update this section!

## Coding practices

### Guidelines for clean code

- Prioritize error handling and edge cases
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
